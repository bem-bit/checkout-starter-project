/* eslint-disable jsx-a11y/alt-text */
import { useEffect, useState } from 'react';
import './App.css';
import axios from 'axios';

function App() {
  const [checkoutInfo, setCheckoutInfo] = useState({});
  const [checkoutList, setCheckoutList] = useState({});
  const [url, setUrl] = useState('');
  const [logo, setLogo] = useState('');
  const [titulo, setTitulo] = useState('');
  const [description, setDescription] = useState('');
  const [isPixChecked, setIsPixChecked] = useState(false);
  const [isCriptoChecked, setIsCriptoChecked] = useState(false);
  const [selectedValue, setSelectedValue] = useState(0);
  const [isAllTokensSelected, setIsAllTokensSelected] = useState(false);
  const [checkoutStatus, setCheckoutStatus] = useState(false);
  const [orderList, setOrderList] = useState({});
  const [orderDetails, setOrderDetails] = useState({});
  const [orderStatus, setOrderStatus] = useState({})
  const [withdrawalValue, setWithdrawalValue] = useState(0)
  const [orderCancelMessage, setOrderCancelMessage] = useState('')

  // Slug do link de checkout
  const checkoutSlug = 'trocambio';

  // Order ID
  const orderId = '64c149bac00e6be4bf496907';

  // Em Prod utilizar https://api.bembit.com/api/v1
  const urlBase = 'https://api-sandbox.bembit.com/api/v1';

  const minutos = [1, 2, 3, 4, 5, 10, 15, 20, 30, 60, 120];

  const headers = {
    accept: 'application/json',
    api: '26Rp0OmVd0',
    secret: 'OWpV9QXmAeo78oygWZk22jVlnApEnBF9',
  };

  const headers_activate = {
    accept: '*/*',
    api: '26Rp0OmVd0',
    secret: 'OWpV9QXmAeo78oygWZk22jVlnApEnBF9',
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const data = {
      slug: url,
      title: titulo,
      description: description,
      logo: logo,
      paymentMethodPix: {
        enabled: isPixChecked,
        expiryTimeInMinutes: selectedValue,
      },
      paymentMethodCrypto: {
        enabled: isCriptoChecked,
        expiryTimeInMinutes: 30,
        allTokens: isAllTokensSelected,
        highlightTokens: ['BNB'],
      },
    };

    try {
      await axios.post(`${urlBase}/checkouts`, data, { headers });
    } catch (e) {
      console.log(e);
    }
  };

  const toggleCheckoutStatus = async () => {
    if (!checkoutStatus) {
      try {
        await axios
          .patch(
            `${urlBase}/checkouts/${checkoutInfo.id}/activate`,
            {},
            { headers: headers_activate }
          )
          .then((r) => {
            console.log(r);
          });
        setCheckoutStatus(!checkoutStatus);
      } catch (error) {
        console.log(error);
      }
    } else {
      try {
        await axios
          .patch(
            `${urlBase}/checkouts/${checkoutInfo.id}/deactivate`,
            {},
            { headers: headers_activate }
          )
          .then((r) => {
            console.log(r);
          });
        setCheckoutStatus(!checkoutStatus);
      } catch (error) {
        console.log(error);
      }
    }
    return;
  };

  const getCheckoutList = async () => {
    try {
      const res = await axios.get(`${urlBase}/checkouts`, { headers });
      setCheckoutList(res.data);
    } catch (error) {
      console.log(error);
    }
  };

  const getCheckoutInfo = async (slug) => {
    const res = await axios.get(`${urlBase}/checkouts/${slug}`);

    setCheckoutInfo(res.data);
    setCheckoutStatus(res.data.active);
  };

  const getOrdersList = async () => {
    try {
      const res = await axios.get(`${urlBase}/orders`, { headers });
      setOrderList(res.data);
    } catch (error) {
      console.log(error);
    }
  };

  const getOrderDetails = async () => {
    try {
      const res = await axios.get(`${urlBase}/orders/${orderId}`, { headers });
      setOrderDetails(res.data);
    } catch (error) {
      console.log(error);
    }
  };

  const getOrderStatus = async () => {
    try {
      const res = await axios.get(`${urlBase}/orders/${orderId}/status`, { headers });
      setOrderStatus(res.data)

    } catch (error) {
      console.log(error)
    }
  };

  const handleWithdrawal = async(e) => {
    e.preventDefault();

    const withdrawData = {
      "currency": "BRL",
      "amount": (withdrawalValue * 1000)
    }

    try {
      await axios.post(`${urlBase}/orders/withdraw`, { data: withdrawData }, { headers })
    } catch (error) {
      console.log(error)
    }

  }

  const handleCancelOrder = async () => {
    try {
      await axios.delete(`${urlBase}/orders/${orderId}/cancel`, { headers })
    } catch (error) {
      console.log(error)
      setOrderCancelMessage(error.response.data.description)
    }
  }

  useEffect(() => {
    getCheckoutInfo(checkoutSlug);
    getCheckoutList();
    getOrdersList();
    getOrderDetails();
    getOrderStatus()
  }, [checkoutStatus]);

  return (
    <div className="App">
      <div>
        <h1>Bembit API Integration Cheat Sheet</h1>
        <div style={{ border: '2px solid black', padding: '24px' }}>
          <h2>Checkouts</h2>
          <div
            style={{
              border: '1px dashed black',
              width: '100%',
              display: 'grid',
              gridTemplateColumns: 'auto auto auto',
              height: '50vh',
              gap: 10,
              padding: 10,
              background: '#061229',
            }}
          >
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>
                Informações do Link de pagamento.
              </h2>
              <pre>{JSON.stringify(checkoutInfo, null, 2)}</pre>
            </div>
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>
                Lista de Links de Pagamento.
              </h2>
              <pre>{JSON.stringify(checkoutList, null, 2)}</pre>
            </div>
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>Criar link de pagamento</h2>
              <form onSubmit={handleSubmit} encType="multipart/form-data">
                <label htmlFor="url">URL:</label>
                <input
                  type="text"
                  id="url"
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                  placeholder="digite o URL"
                />
                <br />

                <label htmlFor="logo">Logo:</label>
                <input
                  type="file"
                  id="logo"
                  onChange={(e) => setLogo(e.target.files[0])}
                />
                <br />

                <label htmlFor="titulo">Título:</label>
                <input
                  type="text"
                  id="titulo"
                  value={titulo}
                  onChange={(e) => setTitulo(e.target.value)}
                  placeholder="digite o título"
                />
                <br />
                <label htmlFor="description">Descrição:</label>
                <br />
                <textarea
                  id="description"
                  rows="4"
                  cols="50"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="digite a descrição"
                ></textarea>
                <br />

                <input
                  type="checkbox"
                  id="PIX"
                  checked={isPixChecked}
                  onChange={() => setIsPixChecked(!isPixChecked)}
                />
                <label htmlFor="PIX">PIX</label>
                <br />

                {isPixChecked && (
                  <>
                    <label htmlFor="selectValue">
                      Tempo de expiração em minutos:
                    </label>
                    <select
                      id="selectValue"
                      value={selectedValue}
                      onChange={(e) => setSelectedValue(e.target.value)}
                    >
                      {minutos.map((v) => (
                        <option value={v} key={v}>
                          {v}
                        </option>
                      ))}
                    </select>
                    <br />
                  </>
                )}

                <input
                  type="checkbox"
                  id="Criptomoedas"
                  checked={isCriptoChecked}
                  onChange={() => setIsCriptoChecked(!isCriptoChecked)}
                />
                <label htmlFor="Criptomoedas">Criptomoedas</label>
                <br />
                {isCriptoChecked && (
                  <>
                    <input
                      type="checkbox"
                      id="allTokens"
                      checked={isAllTokensSelected}
                      onChange={() =>
                        setIsAllTokensSelected(!isAllTokensSelected)
                      }
                    />
                    <label htmlFor="allTokens">Aceitar todos os tokens</label>
                    <br />
                  </>
                )}
                <br />

                <input type="submit" value="Enviar" />
              </form>
            </div>
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>
                Ativa/Desativa um Link de pagamento.
              </h2>
              <h5>Link Id: {checkoutInfo.id}</h5>
              <h5>Status: {checkoutStatus ? 'Ativo' : 'Inativo'}</h5>
              <button onClick={() => toggleCheckoutStatus()}>
                {checkoutStatus ? 'Desativar' : 'Ativar'}
              </button>
            </div>
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#7da5f5',
              }}
            ></div>
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>
                Atualizar um Link de pagamento.
              </h2>
            </div>
          </div>
          <h2>Orders</h2>
          <div
            style={{
              border: '1px dashed black',
              width: '100%',
              display: 'grid',
              gridTemplateColumns: 'auto auto auto',
              height: '50vh',
              gap: 10,
              padding: 10,
              background: '#061229',
            }}
          >
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>Lista de Pedidos.</h2>
              <pre>{JSON.stringify(orderList, null, 2)}</pre>
            </div>
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>Detalhes de um Pedido.</h2>
              <pre>{JSON.stringify(orderDetails, null, 2)}</pre>
            </div>
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>Status de um Pedido.</h2>
              <p><strong>Pedido: </strong>{orderId}</p>
              <p><strong>Status: </strong>{orderStatus.status}</p>
            </div>
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>Criar pedido de saque.</h2> 
              <form onSubmit={handleWithdrawal} encType="multipart/form-data">
              <label htmlFor="withdraw">Valor:</label>
                <input
                  type="text"
                  id="withdraw"
                  value={withdrawalValue}
                  onChange={(e) => setWithdrawalValue(e.target.value)}
                  placeholder="Digite o valor do saque."
                />
                <br />
                <input type="submit" value="Enviar" />
              </form>
            </div>
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>Cancelar um Pedido.</h2>
                <p><strong>ID do Pedido: </strong>{orderId}</p>
                {orderCancelMessage !== '' ? orderCancelMessage : <></>}
                <br />
                <button onClick={handleCancelOrder}>Cancelar</button>
            </div>
            <div
              style={{
                overflow: 'auto',
                border: '1px dotted blue',
                textAlign: 'left',
                padding: '14px',
                background: '#fff',
              }}
            >
              <h2 style={{ textAlign: 'center' }}>Criar um Pedido.</h2>
              <h3 style={{ textAlign: 'center' }}>Pelo link de pagamento</h3>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
